
:tex_raw:[[%]]

:the_book_subsection:[[s100210]]

:the_book_subsubsection:[[ss001u10]]

读者可以使用Qt Creator打开“QtQmlBook.pro”。
在Windows平台下，读者
也可以修改“build_msvc.bat”，从而使用Visual Studio。

如:tex_raw:[[\lstlistingname\ \ref{f000018}]] ：


:the_book_file:[[f000018]]


:tex_raw:[[\begin{itemize}]]

:tex_raw:[[\item ]]第1行用于设置Qt运行环境；
:tex_raw:[[\item ]]第2行用于设置Visual Studio工程文件输出目录；
:tex_raw:[[\item ]]第3~6行用于指明将哪些qmake项目转为Visual Studio项目；

:tex_raw:[[\end{itemize}]]

运行完上述命令后，读者即可使用Visual Studio打
开“QtQmlBook.sln”

本节示例代码位于文件夹“QtQmlBook/chapter01/firstapplication”下。

:tex_raw:[[\lstlistingname\ \ref{f000019}]]
展示了
该项目的工程文件。

:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第11行引入“outdirpath.pri”文件，此文件定义了输出路径。
:tex_raw:[[\item ]]第13行引入“cplusplus.pri”文件，此文件定义了标准C++相关控制项。
:tex_raw:[[\item ]]第15行引入“import_sstd_library.pri”文件，此文件引入“sstd_library”库。
“sstd_library”库用于引入和补充标准C++库。
:tex_raw:[[\item ]]第17行引入“import_sstd_qt_and_qml_library.pri”文件，
此文件引入“sstd_qt_and_qml_library”库。
“sstd_qt_and_qml_library”库用于引入和补充Qt库。
:tex_raw:[[\item ]]第44~48行将Qml文件加入工程。这是一种惯用法，用于实现Qml国际化。
:tex_raw:[[\end{itemize}]]

本书的所有工程项目大同小异，以后不再赘述。

:the_book_file:[[f000019]]

:tex_raw:[[%设置Qt Quick运行参数]]
:the_book_subsubsection:[[ss001v10]]

Qt Quick路径识别依靠QUrl类。
QUrl既可以表达一个网络路径也可以表达一个本地路径。

使用QUrl表达一个本地绝对路径，Windows平台下需要在开头加“file:///”，
POSIX平台下需要在开头加“file://”。

比如，在Windows平台下一个本地绝对路径是“C:/main.qml”，
那么用QUrl表达则为“file:///C:/main.qml”；在Linux平台下
一个本地绝对路径是“/usr/main.qml”，那么
用QUrl表达则为“file:///usr/main.qml”。

:tex_raw:[[\lstlistingname\ \ref{f000026}]]
展示如何用C++实现这一功能。

:the_book_file:[[f000026]] :tex_raw:[[%main4.qml]]

Qt Quick依赖于OpenGL。:tex_raw:[[\lstlistingname\ \ref{f000027}]]
展示常用OpenGL参数设置。

:the_book_file:[[f000027]] :tex_raw:[[%main5.qml]]

Qt库依靠事件队列实现消息循环。因而在使用绝大多数Qt组件之前
都要先构造QCoreApplication或其子类。

在构造QCoreApplication之前，
需要设置一些参数。
:tex_raw:[[\lstlistingname\ \ref{f000028}]]
展示了一些常见设置。

:the_book_file:[[f000028]] :tex_raw:[[%main6.qml]]

在构造完QCoreApplication之后，
还需要加载一些组件。比如QImage组件是依靠插件支持的。
对于一些外存较差的设备而言，加载插件可能会造成几百毫秒
甚至数秒的卡顿。为了程序运行平滑，这些组件都是预加载的。

:tex_raw:[[\lstlistingname\ \ref{f000029}]]
展示了如何实现这一操作。

:the_book_file:[[f000029]] :tex_raw:[[%main7.qml]]

:tex_raw:[[\lstlistingname\ \ref{f00002u}]]
展示了如何在工程文件中引入常用Qt库。

:the_book_file:[[f00002u]] :tex_raw:[[%import_sstd_qt_and_qml_library.1.pri]]

:the_book_subsubsection:[[ss001010]]

QQuickView自Qt 5.0引入。

QQuickView被设计用来提供一个在显示器上
呈现Qml渲染结果的一个集成环境。
如果读者需要在移动设备上呈现Qml，
QQuickView是一个好的选择。

:the_book_file:[[f000020]] :tex_raw:[[%main.cpp]]
:the_book_file:[[f000023]] :tex_raw:[[%main1.qml]]

:the_book_subsubsection:[[ss001110]]

QQuickWidget自Qt 5.3引入。

引入QQuickWidget的目的就是混用
Qt Quick和Qt Widgets。
但实际上，使用QQuickWidget加载Qml和使用QQuickView加载Qml的
根本区别在于：
QQuickWidget是同步渲染的，而QQuickView是异步渲染的。

对于一些小型应用程序，异步渲染是不必要的。
而更重要的是，在一些设备上，由于硬件限制，异步渲染是低效甚至
不可实现的。即使可以实现，也可能有一些莫名其妙的BUG。

对于以上情形，
使用QQuickWidget比使用QQuickView能够获得
更好的效果，甚至能消除一些BUG。

:the_book_file:[[f000021]] :tex_raw:[[%main.cpp]]
:the_book_file:[[f000024]] :tex_raw:[[%main2.qml]]

:the_book_subsubsection:[[ss001210]]

QQmlApplicationEngine自Qt 5.1引入。

引入QQmlApplicationEngine的目的是为了能够实现Qt Quick Controls。

QQmlApplicationEngine是对
QQuickView的进一步包装和扩展。
Qt Quick Controls一些控件比如“对话框”需要一些
全局支持。
QQmlApplicationEngine就是被设计用来提供这些全局支持的。

如果读者不需要传统对话框的话，
QQuickView或QQuickWidget也是可以使用的。

:the_book_file:[[f000022]] :tex_raw:[[%main.cpp]]
:the_book_file:[[f000025]] :tex_raw:[[%main3.qml]]



























