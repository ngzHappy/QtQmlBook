
:tex_raw:[[%]]

:the_book_subsection:[[s000110]]

:the_book_subsubsection:[[ss000110]]

读者可以到:tex_raw:[[ \url{http://download.qt.io/archive/
}]]
下载最新的Qt运行环境。该网址核心内容
如:tex_raw:[[\figurename\ \ref{p000000a}]]所示。

:the_book_image:[[p000000a]]

:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]“vsaddin/” 

此目录存放了Visual Studio插件
:tex_raw:[[\item ]]“qtcreator/” 

此目录存放了各版本Qt Creator源码及编译好的二进制离线安装包
:tex_raw:[[\item ]]“qt/” 

此目录存放了各版本Qt源码及编译好的二进制离线安装包
:tex_raw:[[\item ]]“online_installers/”

此目录存放了各个版本的离线二进制安装包
:tex_raw:[[\end{itemize}]]

一般情况下，读者直接从“qt/” 目录下载离线安装包即可。

然而，遗憾的是，从Qt 5.12.0开始从“qt/”目录下载的Windows平台下的离线Qt开发环境并不完整。
读者最好从“online_installers/”目录下在离线安装包。然后，
以管理员身份运行下载下来的离线安装包。

值得注意的是，
选择安装路径时请不要选择包含空格和中文字符的路径。
虽然现代开发环境对于空格和中文字符支持良好，
但是，很多第三方辅助工具未必支持空格和中文字符。
包括本书自带的辅助工具也不保证支持空格和中文。

在Windows平台下，建议读者选择安装“MSVC 2017 64-bit”或以上版
或者
“MinGW 7.3.0 64-bit”或以上版本。
Qt选择5.12.0或以上版本。
安装的时候最好选择安装“Sources”、“Qt Charts”、“Qt WebEngine”以及
“Qt Debug Information Files”这些模块。
在“Tools”选项下组好安装“CDB”以及对应的“MinGW”。
本书建议最小安装如:tex_raw:[[\figurename\ \ref{p000001}]]。
:the_book_image:[[p000001]]

:the_book_subsubsection:[[ss000210]]
读者需要到Boost官网:tex_raw:[[ \url{https://www.boost.org/
}]]下载最新Boost稳定版。解压缩，将“boost”文件夹复制到Qt Include路径。

比如，
用户的Qt Include路径为：
:tex_raw:[[\begin{littlelongworld}]]
C:\Qt\Qt5.12.0\5.12.0\msvc2017_64\include
:tex_raw:[[\end{littlelongworld}]]
:tex_raw:[[\hspace*{\parindent}]]复制完boost之后，
应当存在路径：
:tex_raw:[[\begin{littlelongworld}]]
C:\Qt\Qt5.12.0\5.12.0\msvc2017_64\include\boost
:tex_raw:[[\end{littlelongworld}]]
:tex_raw:[[\hspace*{\parindent}]]当然，读者也可以采用“mklink”建立链接代替拷贝。

如果读者使用的是Visual Studio自带的编译器，则需要使用“Visual Studio命令提示符”运
行:tex_raw:[[\commandnumbernameone\ \ref{command000002s02}]]。
并将编译结果的“*.lib”文件拷贝到Qt根目录下的lib文件夹，
将“*.dll”文件拷贝到Qt根目录下的bin文件夹。

:tex_raw:[[\renewcommand\thelstnumber{\ifnum\value{lstnumber}>3{\ }\else{\arabic{lstnumber}}\fi}]]
:the_book_command_file:[[command000002s02]]
:tex_raw:[[\renewcommand\thelstnumber{\arabic{lstnumber}}]]

之后，读者需要根据编译输出更新“QtQmlBook/msvc_boost.pri”文件。
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000041}]]
所示：
:the_book_file:[[f000041]]

如果读者使用的是MinGW环境，则需要使用“MinGW命令提示符”运
行:tex_raw:[[\commandnumbernameone\ \ref{command000002s01}]]。
并将编译结果的“*.a”文件拷贝到Qt根目录下的lib文件夹，
将“*.dll”文件拷贝到Qt根目录下的bin文件夹。

:tex_raw:[[\renewcommand\thelstnumber{\ifnum\value{lstnumber}>3{\ }\else{\arabic{lstnumber}}\fi}]]
:the_book_command_file:[[command000002s01]]
:tex_raw:[[\renewcommand\thelstnumber{\arabic{lstnumber}}]]

之后，读者需要根据编译输出更新“QtQmlBook/mingw_boost.pri”文件。
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000040}]]
所示：
:the_book_file:[[f000040]]

:the_book_subsubsection:[[ss000310]]

:tex_raw:[[%LD_PRELOAD]]
:tex_raw:[[%由于Windows平台下不存在类似于Linux平台“LD_PRELOAD”这样可以动态]]
对于C++来说，小对象的内存碎片问题向来很棘手。
一般而言，使用tcmalloc或jemalloc可以有效避免内存碎片问题。

在Linux平台或类似平台下，
可以使用“LD_PRELOAD”或类似的技术轻松的覆盖动态链接库中的函数。
因而，在Linux平台下，使用tcmalloc或jemalloc替换C库中的内存分配函数是简易的。

而在Windows平台下，
覆盖动态库中的函数相当复杂。
为了能够使得本书的示例代码不是玩具，
本书在Windows平台下使用jemalloc克服小对象内存碎片。

当使用MSVC编译器的时候，本书直接嵌入jemalloc源代码，
因而读者不必特别操心。
但是，当在Windows下使用MinGW编译器时，
读者需要自己静态编译jemalloc:tex_raw:[[\footnote{]]
如果读者使用MinGW 7.3 64 bit版本的编译器，
本书已经将对应版本的jemalloc编译好了，
读者不需要再次编译。
:tex_raw:[[}]]。
并将编译结果放置到：
:tex_raw:[[\begin{littlelongworld}]]
QtQmlBook\sstd_library\memory\libs
:tex_raw:[[\end{littlelongworld}]]
文件夹下。
并将文件重命名为“jemalloc_win64_mingw_730.a”。
如果读者实在无法静态编译jemalloc，
读者可以找到：
:tex_raw:[[\begin{littlelongworld}]]
QtQmlBook\sstd_library\_sstd_library_memory.pri
:tex_raw:[[\end{littlelongworld}]]
并将此文件内容清空:tex_raw:[[\footnote{]]
注意不要删除这个文件，而只是删除此文件内容。
:tex_raw:[[}]]。

:tex_raw:[[
% ______all_key_words
% the_book_chapter the_book_subsection the_book_subsubsection
% the_book_section the_book_image the_book_table
% the_book_file the_book_tree_file the_book_command_file
% littlelongworld tabbing ref
% figurename tablename filesourcenumbernameone
% treeindexnumbernameone commandnumbernameone footnote
% item itemize comment textbullet
% \hspace*{\parindent}
% FloatBarrier
]]

