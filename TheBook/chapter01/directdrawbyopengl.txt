
:the_book_section:[[s100710]]

读者可能认为使用Qt Quick只需要Qml足以，但不久读者就会失望。
即使退一步，希望Qt Quick可以满足绝大多数需求，这也是难以达成。

Qt Quick不是一种全面代替Qt C++无所不包的解决方案。
Qt Quick只是导出Qt C++的一套接口规范。

当读者面对一个具体的问题，在Qt Quick中无法找到现成的组件或者无法通过
简单修改现有Qt Quick组件达成目的时。使用Qt C++自定义组件就势在必行。

:tex_raw:[[\begin{itemize}]]

:tex_raw:[[\item ]]如果所需的组件不需要几何逻辑，
比如实现一个本地文件监视器，那么只继承自QObject即可；

:tex_raw:[[\item ]]如果所需的组件需要几何逻辑但无需渲染，
比如实现一个鼠标监视器，那么只需要继承自QQuickItem；

:tex_raw:[[\item ]]如果所需的组件需要渲染，
那么需要继承自QQuickItem，并在构造函数中设置
QQuickItem::ItemHasContents标志位；

:tex_raw:[[\item ]]如果希望使用QPainter实现渲染，
那么需要继承自QQuickPaintedItem是一个好的选择；

:tex_raw:[[\item ]]如果仅需要一个简易的OpenGL离屏渲染环境，
那么继承自QQuickFramebufferObject是一个好的选择；

:tex_raw:[[\end{itemize}]]

如:tex_raw:[[\figurename\ \ref{p000010}]]
，列出了C++导出Qt Quick基类继承关系图。



:the_book_image:[[p000010]]

