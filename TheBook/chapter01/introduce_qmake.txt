:tex_raw:[[%Gook Luck！]]

:the_book_section:[[s100310]]

qmake类似于cmake，但qmake比cmake更加简洁清晰。
如果读者希望写一个跨平台的通用库的话，
或许cmake是比qmake更加优异的选择。
但读者明确是写一个特定的应用程序的话，
qmake就比cmake优秀的多。
qmake比cmake功能较少，
但从另一个角度，
qmake比cmake更加专注。
通过本节，
读者会发现只需要学习可怜的一点内容，
就可以使用qmake搭建出复杂的程序架构。
不过，本书毕竟是一门专门写Qt Quick的书，
不可能介绍qmake的每一个细节。

:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsection:[[ss000610]]
读者新建一个目录:tex_raw:[[\footnote{]]
本书所有目录都要求不包含空格和中文，以后不再赘述。
:tex_raw:[[}]]，
在此文件夹下新建一个“hellow_world.pro”文件，输入文件内容如
:tex_raw:[[\filesourcenumbernameone\ \ref{f000002}]]。
在此文件夹下建立“main.cpp”文件，输入内容如
:tex_raw:[[\filesourcenumbernameone\ \ref{f000003}]]。

:the_book_file:[[f000002]]
:the_book_file:[[f000003]]

使用Qt Creator打开“hellow_world.pro”，
运行此项目。

现在来分析一下:tex_raw:[[\filesourcenumbernameone\ \ref{f000002}]]：
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第1~2行表示不使用Qt库；
:tex_raw:[[\item ]]第4行表示这是一个控制台应用程序；
:tex_raw:[[\item ]]第6~10行表示在debug模式下输出目标名称是“hellow_world_debug”，
在release模式下输出目标名称是“hellow_world”；
:tex_raw:[[\item ]]第12行表示输出的是一个应用程序；
:tex_raw:[[\item ]]第14~18行表示使用C++ 17标准；
:tex_raw:[[\item ]]第20行将“main.cpp”加入编译过程；
:tex_raw:[[\item ]]第21行规定输出目录就是当前“pro”文件所在目录；
:tex_raw:[[\item ]]第23行定义了一个叫“NUMBER”的宏，宏的值是一个数字；
:tex_raw:[[\item ]]第24行定义了一个叫“HELLOW”的宏，宏的值是一个字符串；
:tex_raw:[[\item ]]第25行定义了一个叫“QT_DEPRECATED_WARNINGS”的宏，这个宏没有定义值；
:tex_raw:[[\end{itemize}]]

不难发现qmake的语法十分简单：
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]“=”代表赋值；
:tex_raw:[[\item ]]“+=”代表向变量中增加元素；
:tex_raw:[[\item ]]“-=”代表从变量中删除元素；
:tex_raw:[[\item ]]“*=”代表如果变量中不存在则加入元素否则忽略；
:tex_raw:[[\item ]]“~=”代表替换变量中的值；
:tex_raw:[[\item ]]“$$”代表当qmake运行时，变量的字面值；
:tex_raw:[[\item ]]“$”代表当qmake生成Makefile后，变量的字面值；
:tex_raw:[[\item ]]“#”代表注释；
:tex_raw:[[\item ]]“SOURCES”代表需要编译的C/C++源代码变量；
:tex_raw:[[\item ]]“HEADERS”代表C/C++头文件变量；
:tex_raw:[[\item ]]“DEFINES”代表C/C++宏变量；
:tex_raw:[[\item ]]“TARGET”代表输出对象名称；
:tex_raw:[[\item ]]“CONFIG”用来加入和检查Qt中预定义的编译选项；
:tex_raw:[[\item ]]“QMAKE_CXXFLAGS”代表qmake生成Makefile时需要加入的编译器参数；
:tex_raw:[[\item ]]“TEMPLATE”决定此项目的模板类型，本案例是使用应用程序模板“app”，
顾名思义此模板的目标是生成应用程序。后续章节会介绍更多模板；
:tex_raw:[[\end{itemize}]]

第6~10行和14~18虽然写法不同，实际上都是检查“CONFIG”中是否定义了特定项。
读者可以尝试一下向文件“hellow_world.pro”文件最后
加入:tex_raw:[[\filesourcenumbernameone\ \ref{f00000d}]]，
分别去掉:tex_raw:[[\filesourcenumbernameone\ \ref{f00000d}]]第一行和
保留第一行，
观察Qt Creator的“概要信息”输出什么。
:the_book_file:[[f00000d]]



:tex_raw:[[%
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsection:[[ss000710]]

绝大多数项目的项目结构都很复杂，从这一节开始读者要开始接受这一事实。
本节示例的项目结构如:tex_raw:[[\treeindexnumbernameone\ \ref{d000001}]]
所示。

:the_book_tree_file:[[d000001]]

先来看看“import_library.pro”文件，
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000010}]]
所示。

此文件启用了一个新的模版，“subdirs”。

“subdirs”模版可以将一系列孤立的工程组织起来:tex_raw:[[\footnote{]]
最好不要嵌套引用subdirs，某些IDE并不支持。
:tex_raw:[[}]]，
并要求它们按照一定先后顺序编译。
比如本节采用的“CONFIG += ordered”就要求项目按照定义顺序编译。

:the_book_file:[[f000010]]

再来看看“the_app.pro”文件，
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000016}]] 所示。它采用了“app”模版。
比起上一节，它多了一些新的知识点。
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第21~23行更改了在非Windows平台下程序的链接参数，
它要求程序运行时将其所在目录加入动态库搜索路径；
:tex_raw:[[\item ]]第28行将另一个文件引入此文件，它和C/C++的“#include”工作原理一致；
:tex_raw:[[\end{itemize}]]

:the_book_file:[[f000016]]

接下来是“import_test_library.pri”文件，
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000011}]] 所示。
它也引入了一些新的知识。
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第2行使用“INCLUDEPATH”变量将当前目录加入C/C++包含路径搜索路径；
:tex_raw:[[\item ]]第3~7行使用“LIBS”变量导入C/C++链接库，
“:tex_raw:[[{]]-L:tex_raw:[[}]]”后面是库所在路径，
“:tex_raw:[[{]]-l:tex_raw:[[}]]”后面紧跟库的名称；
:tex_raw:[[\end{itemize}]]
:the_book_file:[[f000011]]

然后，我么来看一下如何使用qmake定义一个动态链接库。
一切与定义应用程序没什么不同，只是将
“TEMPLATE = app”改成了
“TEMPLATE = lib”，如:tex_raw:[[\filesourcenumbernameone\ \ref{f000012}]] 第13行所示。

:the_book_file:[[f000012]]:tex_raw:[[%test_library.pro]]


剩下的是
“TestLibrary.hpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000014}]]），
“TestLibrary.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000013}]]）
和
“main.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000015}]]）
。
都是标准C++，本书不赘述。
:the_book_file:[[f000014]]:tex_raw:[[%TestLibrary.hpp]]
:the_book_file:[[f000013]]:tex_raw:[[%TestLibrary.cpp]]
:the_book_file:[[f000015]]:tex_raw:[[%main.cpp]]


:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsection:[[ss000810]]

qmake远比读者想象的要复杂的多，
本节向读者展示一些常见功能如何使用qmake实现。

:the_book_image:[[p000002]]

如:tex_raw:[[\figurename\ \ref{p000002}]]
一个C/C++程序编译至少可以抽象出三个节点，
源代码编译前，
链接前以及链接后。
这三个时刻分别对应于qmake变量：
QMAKE_EXTRA_COMPILERS，
QMAKE_PRE_LINK以及
QMAKE_POST_LINK。

使用这三个控制变量，用户可以在这三个时刻执行自定义命令。

本节代码树
如:tex_raw:[[\treeindexnumbernameone\ \ref{d000000}]]
所示，
“advance_use_qmake.pro”文件
如:tex_raw:[[\filesourcenumbernameone\ \ref{f000004}]]
所示。

:the_book_tree_file:[[d000000]] :tex_raw:[[%tree.txt]]

:the_book_file:[[f000004]] :tex_raw:[[%advance_use_qmake.pro]]

本案例向读者展示：
:tex_raw:[[\begin{enumerate}]]
:tex_raw:[[\item ]]在编译开始前，qmake调用“程序new_moc”自动生成cpp文件并加入编译过程；
:tex_raw:[[\item ]]在链接前qmake调用“程序before_run”，“程序before_run”
向“the_run文件夹”下建立一个“before_run.txt文件”；
:tex_raw:[[\item ]]在链接完成后qmake调用“程序after_run”，“程序after_run”
向“the_run”文件夹下建立一个“after_run.txt文件”；
:tex_raw:[[\end{enumerate}]]

主要分析一下“the_run.pro”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000005}]]）。

:tex_raw:[[%##########################################################]]

:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第28~41行展示了如何使用
“QMAKE_EXTRA_COMPILERS”。

“QMAKE_EXTRA_COMPILERS”往往用于自定义一种“编译时编译”规则，
实际上Qt的moc就是这么实现的。
读者可以用此技术实现自定义代码生成器，
不过这需要读者有编译原理相关知识。
:tex_raw:[[\item ]]第44~49行展示了如何使用
“QMAKE_PRE_LINK”。

实际上，对于一般用户，
“QMAKE_PRE_LINK”并不常用。
除非读者要实现类似
将其它编译器编译的二进制文件加入本次编译过程的功能。
:tex_raw:[[\item ]]第52~57行展示了如何使用
“QMAKE_POST_LINK”。

“QMAKE_POST_LINK”往往用来
自定义“make install”。虽然qmake有默认的“make install”规则。
不过，本书并不准备介绍。因为，
一个实际应用程序的“make install”往往不是简单的拷贝，
而是需要对文件进行加密、压缩或者对文件进行语法检查等额外的任务。
而利用C++ 17的filesystem模块自己实现一个单纯的拷贝程序并不复杂。
因而，本书介绍更加通用的“QMAKE_POST_LINK”，
而不介绍qmake的专用语法。
:tex_raw:[[\end{itemize}]]

:tex_raw:[[%##########################################################]]


:the_book_file:[[f000005]] :tex_raw:[[%the_run.pro]]



其余的，
“before_run.pro”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000008}]]）
、“before_run/main.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000009}]]）
、“after_run.pro”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000006}]]）
、“after_run/main.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f000007}]]）
、“new_moc.pro”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f00000b}]]）
、“new_moc/main.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f00000c}]]）
和
“the_run/main.cpp”
（如:tex_raw:[[\filesourcenumbernameone\ \ref{f00000a}]]）
没有新知识点，本书不赘述。

:the_book_file:[[f000008]] :tex_raw:[[%before_run.pro]]
:the_book_file:[[f000009]] :tex_raw:[[%before_run/main.cpp]]

:the_book_file:[[f000006]] :tex_raw:[[%after_run.pro]]
:the_book_file:[[f000007]] :tex_raw:[[%after_run/main.cpp]]

:the_book_file:[[f00000b]] :tex_raw:[[%new_moc.pro]]
:the_book_file:[[f00000c]] :tex_raw:[[%new_moc/main.cpp]]

:the_book_file:[[f00000a]] :tex_raw:[[%the_run/main.cpp]]


:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsection:[[ss000910]]
使用qmake生成Visual Studio工程十分简单，
其核心指令只有一条，
如:tex_raw:[[\commandnumbernameone\ \ref{command000003}]]：

:the_book_command_file:[[command000003]]

在Windows平台下读者如果想在命令行下运行此命令需要设置
好运行环境。


读者可以在Qt安装目录下找到“qtenv2.bat”文件。其中一个合法路径是：
:tex_raw:[[\begin{littlelongworld}]]
C:\Qt\Qt5.12.0\5.12.0\msvc2017_64\bin\qtenv2.bat
:tex_raw:[[\end{littlelongworld}]]
:tex_raw:[[\hspace*{\parindent}]]读者要修改“qtenv2.bat”文件。
32位开发环境将“vcvarsall.bat”或
64位开发环境将“vcvar64.bat”引入并执行。

如:tex_raw:[[\filesourcenumbernameone\ \ref{f000017}]]
第5行所示：
:the_book_file:[[f000017]] :tex_raw:[[%qtenv2.windows.bat.txt]]

以后读者在Windows平台下运行“qtenv2.bat”就
可以得到一个完整的运行环境了。

:the_book_subsection:[[ss000a10]]

本书所介绍的知识已经足够帮助读者搭建绝大多数
大型复杂应用程序。
但软件项目如此复杂，
读者可能需要更进一步的知识才能解决手头的问题。

Qt的帮助系统一向被认为是各个软件项目中最好的之一。
读者只需要打开Qt Creator，
在帮助的索引搜索栏里面输入“qmake”，一切读者需要的信息就出现了。

:tex_raw:[[\begin{itemize}]]

:tex_raw:[[\item ]]qmake的所有控制变量

要获得qmake的所有控制变量帮助信息，只需要单击
“qmake Variable Reference”即可，
如:tex_raw:[[\figurename\ \ref{p000003}]]。

:the_book_image:[[p000003]]

:tex_raw:[[\item ]]qmake控制台运行参数

要获得qmake的所有控制台运行参数相关信息，只需要单击
“Running qmake”即可，
如:tex_raw:[[\figurename\ \ref{p000004}]]。
:the_book_image:[[p000004]]

:tex_raw:[[\item ]]qmake的完整语法

要完整的了解qmake的所有语法，只需要单击
“qmake Language”即可，
如:tex_raw:[[\figurename\ \ref{p000005}]]。
:the_book_image:[[p000005]]

:tex_raw:[[\end{itemize}]]

:tex_raw:[[
% ______all_key_words
% the_book_chapter the_book_subsection the_book_subsubsection
% the_book_section the_book_image the_book_table
% the_book_file the_book_tree_file the_book_command_file
% littlelongworld tabbing ref
% figurename tablename filesourcenumbernameone
% treeindexnumbernameone commandnumbernameone footnote
% item itemize comment textbullet
% \hspace*{\parindent}
% FloatBarrier
]]

