

:tex_raw:[[%]]

:the_book_subsection:[[s100310]]

qmake类似于cmake，但qmake比cmake更加简洁清晰。
如果读者希望写一个跨平台的通用库的话，
或许cmake是比qmake更加优异的选择。
但读者明确是写一个特定的应用程序的话，
qmake就比cmake优秀的多。
qmake比cmake确实功能较少，
但从另一个角度，
qmake比cmake更加专注。
通过本节，
读者会发现只需要学习可怜的一点内容，
就可以使用qmake搭建出复杂的程序架构。
不过，本书毕竟是一门专门写Qt Quick的书，
不可能介绍qmake的每一个细节。

:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsubsection:[[ss000610]]
读者新建一个目录:tex_raw:[[\footnote{]]
本书所有目录都要求不包含空格和中文，以后不再赘述。
:tex_raw:[[}]]，
在此文件夹下新建一个“hellow_world.pro”文件，输入文件内容如
:tex_raw:[[\lstlistingname\ \ref{f000002}]]。
在此文件夹下建立“main.cpp”文件，输入内容如
:tex_raw:[[\lstlistingname\ \ref{f000003}]]。

:the_book_file:[[f000002]]
:the_book_file:[[f000003]]

使用QtCreator打开“hellow_world.pro”，
运行此项目。

现在来分析一下:tex_raw:[[\lstlistingname\ \ref{f000002}]]：
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第1~2行表示不使用Qt库；
:tex_raw:[[\item ]]第4行表示这是一个控制台应用程序；
:tex_raw:[[\item ]]第6~10行表示在debug模式下输出目标名称是“hellow_world_debug”，
在release模式下输出目标名称是“hellow_world”；
:tex_raw:[[\item ]]第12行表示输出的是一个应用程序；
:tex_raw:[[\item ]]第14~18行表示使用C++17标准；
:tex_raw:[[\item ]]第20行将“main.cpp”加入编译过程；
:tex_raw:[[\item ]]第21行规定输出目录就是当前“pro”文件所在目录；
:tex_raw:[[\item ]]第23行定义了一个叫“NUMBER”的宏，宏的值是一个数字；
:tex_raw:[[\item ]]第24行定义了一个叫“HELLOW”的宏，宏的值是一个字符串；
:tex_raw:[[\item ]]第25行定义了一个叫“QT_DEPRECATED_WARNINGS”的宏，这个宏没有定义值；
:tex_raw:[[\end{itemize}]]

不难发现qmake的语法十分简单：
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]“=”代表赋值；
:tex_raw:[[\item ]]“+=”代表向变量中增加元素；
:tex_raw:[[\item ]]“-=”代表从变量中删除元素；
:tex_raw:[[\item ]]“*=”代表如果变量中不存在则加入元素否则忽略；
:tex_raw:[[\item ]]“~=”代表替换变量中的值；
:tex_raw:[[\item ]]“$$”代表当qmake运行时，变量的字面值；
:tex_raw:[[\item ]]“$”代表当qmake生成Makefile后，变量的字面值；
:tex_raw:[[\item ]]“#”代表注释；
:tex_raw:[[\item ]]“SOURCES”代表需要编译的C/C++源代码变量；
:tex_raw:[[\item ]]“HEADERS”代表C/C++头文件变量；
:tex_raw:[[\item ]]“DEFINES”代表C/C++宏变量；
:tex_raw:[[\item ]]“TARGET”代表输出对象名称；
:tex_raw:[[\item ]]“CONFIG”用来加入和检查Qt中预定义的编译选项；
:tex_raw:[[\item ]]“QMAKE_CXXFLAGS”代表qmake生成Makefile时需要加入的编译器参数；
:tex_raw:[[\item ]]“TEMPLATE”决定此项目的模板类型，本案例是使用应用程序模板“app”后续章节会介绍更多模板；
:tex_raw:[[\end{itemize}]]

第6~10行和14~18虽然写法不同，实际上都是检查“CONFIG”中是否定义了特定项。
读者可以尝试一下向文件“hellow_world.pro”文件最后
加入:tex_raw:[[\lstlistingname\ \ref{f00000d}]]，
分别去掉:tex_raw:[[\lstlistingname\ \ref{f00000d}]]第一行和
保留第一行，
观察qtcreator的“概要信息”输出什么。
:the_book_file:[[f00000d]]



:tex_raw:[[%
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsubsection:[[ss000710]]

绝大多数项目的项目结构都很复杂，从这一节开始读者要开始接受这一事实。
本节示例的项目结构如:tex_raw:[[\treeindexnumbernameone\ \ref{d000001}]]
所示。

:the_book_tree_file:[[d000001]]

先来看看“import_library.pro”文件，
如:tex_raw:[[\lstlistingname\ \ref{f000010}]]所示。

此文件启用了一个新的模版，“subdirs”。

“subdirs”模版可以将一系列孤立的工程组织起来:tex_raw:[[\footnote{]]
最好不要嵌套引用subdirs，某些IDE并不支持。
:tex_raw:[[}]]，
并要求它们按照一定先后顺序编译。
比如本节采用的“CONFIG += ordered”就要求项目按照定义顺序编译。

:the_book_file:[[f000010]]

再来看看“the_app.pro”文件，
如:tex_raw:[[\lstlistingname\ \ref{f000016}]] 所示。它采用了“app”模版。
比起上一节，它多了一些新的知识点。
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第21~23行更改了在非Windows平台下程序的链接参数，
它要求程序运行时将其所在目录加入动态库搜索路径；
:tex_raw:[[\item ]]第28行将另一个文件引入此文件，它和C/C++的“#include”工作原理一致；
:tex_raw:[[\end{itemize}]]

:the_book_file:[[f000016]]

接下来是“import_test_library.pri”文件，
如:tex_raw:[[\lstlistingname\ \ref{f000011}]] 所示。
它也引入了一些新的知识。
:tex_raw:[[\begin{itemize}]]
:tex_raw:[[\item ]]第2行使用“INCLUDEPATH”变量将当前目录加入C/C++包含路径搜索路径；
:tex_raw:[[\item ]]第3~7使用“LIBS”变量导入C/C++链接库，
“-L”后面是库所在路径，
“-l”后面紧跟库的名称；
:tex_raw:[[\end{itemize}]]
:the_book_file:[[f000011]]

:the_book_file:[[f000012]]:tex_raw:[[%test_library.pro]]


剩下的是
“TestLibrary.hpp”
（如:tex_raw:[[\lstlistingname\ \ref{f000014}]]），
“TestLibrary.cpp”
（如:tex_raw:[[\lstlistingname\ \ref{f000013}]]）
和
“main.cpp”
（如:tex_raw:[[\lstlistingname\ \ref{f000015}]]
。
都是标准C++，本书不再赘述。
:the_book_file:[[f000014]]:tex_raw:[[%TestLibrary.hpp]]
:the_book_file:[[f000013]]:tex_raw:[[%TestLibrary.cpp]]
:the_book_file:[[f000015]]:tex_raw:[[%main.cpp]]


:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsubsection:[[ss000810]]

qmake远比读者想象的要复杂的多，
本节向读者展示一些常见功能如何使用qmake实现。

:the_book_image:[[p000002]]

如:tex_raw:[[\figurename\ \ref{p000002}]]
一个C/C++程序编译至少可以抽象出三个节点，
源代码编译前，
链接前以及链接后。
这三个时刻分别对应于qmake变量：
QMAKE_EXTRA_COMPILERS，
QMAKE_PRE_LINK以及
QMAKE_POST_LINK。

使用这三个控制变量，用户可以在这三个时刻执行自定义命令。

:the_book_tree_file:[[d000000]]

:the_book_file:[[f000004]]
:the_book_file:[[f000005]]
:the_book_file:[[f00000a]]
:the_book_file:[[f000006]]
:the_book_file:[[f000007]]
:the_book_file:[[f000008]]
:the_book_file:[[f000009]]
:the_book_file:[[f00000b]]
:the_book_file:[[f00000c]]

:tex_raw:[[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]]
:the_book_subsubsection:[[ss000910]]





